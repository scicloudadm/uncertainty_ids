[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "uncertainty-ids"
version = "1.0.0"
description = "Uncertainty-Aware Intrusion Detection System based on Bayesian Ensemble Transformers"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Research Team", email = "research@example.com"},
]
maintainers = [
    {name = "Research Team", email = "research@example.com"},
]
keywords = [
    "intrusion detection",
    "uncertainty quantification", 
    "bayesian deep learning",
    "transformers",
    "cybersecurity",
    "machine learning",
    "neural networks",
    "ensemble methods",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security",
    "Topic :: System :: Networking :: Monitoring",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "tqdm>=4.62.0",
    "pydantic>=1.8.0",
    "fastapi>=0.68.0",
    "uvicorn[standard]>=0.15.0",
    "python-multipart>=0.0.5",
    "psutil>=5.8.0",
    "joblib>=1.1.0",
    "pyyaml>=6.0",
    "requests>=2.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.0",
    "pytest-cov>=2.12.0",
    "pytest-mock>=3.6.0",
    "pytest-xdist>=2.3.0",
    "pytest-benchmark>=3.4.0",
    "pytest-asyncio>=0.18.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "isort>=5.9.0",
    "mypy>=0.910",
    "pre-commit>=2.15.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "nbsphinx>=0.8.0",
    "myst-parser>=0.15.0",
    "sphinx-autodoc-typehints>=1.12.0",
]
test = [
    "pytest>=6.2.0",
    "pytest-cov>=2.12.0",
    "pytest-mock>=3.6.0",
    "pytest-xdist>=2.3.0",
    "pytest-benchmark>=3.4.0",
]
api = [
    "fastapi>=0.68.0",
    "uvicorn[standard]>=0.15.0",
    "python-multipart>=0.0.5",
    "prometheus-client>=0.11.0",
    "redis>=3.5.0",
]
notebooks = [
    "jupyter>=1.0.0",
    "notebook>=6.4.0",
    "ipykernel>=6.0.0",
    "jupyterlab>=3.0.0",
    "plotly>=5.0.0",
]
all = [
    "uncertainty-ids[dev,docs,test,api,notebooks]",
]

[project.urls]
Homepage = "https://github.com/research-team/uncertainty-ids"
Documentation = "https://uncertainty-ids.readthedocs.io/"
Repository = "https://github.com/research-team/uncertainty-ids.git"
"Bug Reports" = "https://github.com/research-team/uncertainty-ids/issues"
Changelog = "https://github.com/research-team/uncertainty-ids/blob/main/CHANGELOG.md"

[project.scripts]
uncertainty-ids-train = "uncertainty_ids.cli.train:main"
uncertainty-ids-evaluate = "uncertainty_ids.cli.evaluate:main"
uncertainty-ids-serve = "uncertainty_ids.cli.serve:main"
uncertainty-ids-preprocess = "uncertainty_ids.cli.preprocess:main"

[tool.setuptools]
packages = ["uncertainty_ids"]

[tool.setuptools.package-data]
uncertainty_ids = [
    "configs/*.yaml",
    "data/schemas/*.json",
    "api/templates/*.html",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "tqdm.*",
    "joblib.*",
    "psutil.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=uncertainty_ids",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["uncertainty_ids"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
